#+options: toc:nil date:nil author:nil

#+latex_header: \usepackage{listings}
#+latex_header: \lstdefinestyle{source}{basicstyle=\footnotesize\ttfamily,frame=tb}
#+latex_header: \lstset{style=source}

* init

  #+begin_src emacs-lisp
;; From http://www.emacswiki.org/emacs/LoadPath#AddSubDirectories
;; to add a directory and its subdirectories
(let ((default-directory my-emacs-personal-dir)
      (personal-file (expand-file-name "personal.el" my-emacs-personal-dir)))
  ;;;; THE NEXT ROW SHOULD BE MODIFIED LATER
  (make-directory default-directory t)
  (when (file-exists-p personal-file)
    (load personal-file))
  (setq load-path
        (append
         (let ((load-path (copy-sequence load-path))) ;; Shadow
           (append
            (copy-sequence (normal-top-level-add-to-load-path '(".")))
            (normal-top-level-add-subdirs-to-load-path)))
         load-path)))

(column-number-mode t)

(display-time)

;; From: sandipchitale@yahoo.com (Sandip Chitale)
;; Newsgroups: gnu.emacs.sources
;; Subject: CODE: Duplicate line or region backward or forward
;; Date: 7 Feb 2004 12:15:35 -0800
(defun duplicate-line-backward ()
  "Duplicate the current line backward."
  (interactive "*")
  (save-excursion
    (let ((contents (buffer-substring
                     (line-beginning-position)
                     (line-end-position))))
      (beginning-of-line)
      (insert contents ?\n)))
  (previous-line 1))

(defun duplicate-line-forward ()
  "Duplicate the current line forward."
  (interactive "*")
  (save-excursion
    (let ((contents (buffer-substring
                     (line-beginning-position)
                     (line-end-position))))
      (end-of-line)
      (insert ?\n contents)))
  (next-line 1))

;; from http://stackoverflow.com/a/9414763/577007
(defun prelude-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
  #+end_src

* auctex

  https://www.gnu.org/software/auctex/

  #+BEGIN_QUOTE
  AUCTeX is an extensible package for writing and formatting TeX files
  in GNU Emacs and XEmacs. It supports many different TeX macro
  packages, including AMS-TeX, LaTeX, Texinfo, ConTeXt, and docTeX
  (dtx files).
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :config
  (setq Tex-auto-save t)
  (setq Tex-parse-self t)
  (setq TeX-save-query nil)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t))
  #+end_src

* cdlatex

  https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/

  #+BEGIN_QUOTE
  CDLaTeX is a minor mode for Emacs supporting fast insertion of
  environment templates and math stuff in LaTeX. Similar commands are
  also offered as part of the AUCTeX package, but it is not the same -
  CDLaTeX focuses on speediness for inserting LaTeX constructs. I
  myself am using CDLaTeX on top of AUCTeX.
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package cdlatex
  :ensure t
  :config
  (setq cdlatex-math-symbol-alist
	'(( ?c   ("\\colon"))
	  ( ?m   ("\\mu" "\\mapsto"))
	  ( ?p   ("\\pi" "\\varpi" "\\perp"))
	  ( ?O   ("\\Omega" "\\mathrm{Orb}"))
	  ( ?S   ("\\Sigma" "\\mathrm{Stab}"))
	  ( ?-   ("\\cap" "\\leftrightarrow" "\\longleftrightarrow"))
	  ( ?.   ("\\ldots" "\\cdots" "\\cdot"))
	  ( ?<   ("\\leq" "\\langle"))
	  ( ?>   ("\\geq" "\\rangle"))
	  ( 123  ("\\{ \\}"))
	  ( 125  ("\\subseteq"))
	  ( ?\[  ("\\subseteq"))))

  (setq cdlatex-math-modify-alist
      '(( ?B "\\mathbb"         nil t nil nil)
	( ?a "\\overrightarrow" nil t nil nil)))

  (setq cdlatex-command-alist
      '(("bin"  "Insert \\binom{}{}"
	 "\\binom{?}{}"       cdlatex-position-cursor nil nil t)
	("norm" "Insert \\Vert \\Vert"
	 "\\Vert ?\\Vert"     cdlatex-position-cursor nil nil t)
	("gen"  "Insert \\langle \\rangle"
	 "\\langle ?\\rangle" cdlatex-position-cursor nil nil t)
	("set"  "Insert a set"
	 "\\{?\\mid \\}"      cdlatex-position-cursor nil nil t)))

  (setq cdlatex-simplify-sub-super-scripts nil))
  #+end_src

* dired

  https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html

  #+BEGIN_QUOTE
  Dired makes an Emacs buffer containing a listing of a directory, and
  optionally some of its subdirectories as well. You can use the
  normal Emacs commands to move around in this buffer, and special
  Dired commands to operate on the listed files.
  #+END_QUOTE

  #+BEGIN_SRC emacs-lisp
(use-package dired
  :bind (:map dired-mode-map
	      ("r". dired-start-process))
  :preface
  ;; see https://oremacs.com/2015/01/04/dired-nohup/
  (defun dired-start-process (cmd &optional file-list)
    (interactive
     (let ((files (dired-get-marked-files
		   t current-prefix-arg)))
       (list
	(dired-read-shell-command "& on %s: "
				  current-prefix-arg files)
	files)))
    (let (list-switch)
      (start-process
       cmd nil shell-file-name
       shell-command-switch
       (format
	"nohup 1>/dev/null 2>/dev/null %s \"%s\""
	(if (and (> (length file-list) 1)
		 (setq list-switch
		       (cadr (assoc cmd dired-filelist-cmd))))
	    (format "%s %s" cmd list-switch)
	  cmd)
	(mapconcat #'expand-file-name file-list "\" \"")))))
  :config
  (setq dired-guess-shell-alist-user
	'(("." "xdg-open" "termux-share")))
  (use-package dired-aux)
  (use-package dired-x))
  #+END_SRC

* zenburn

  #+begin_src emacs-lisp
(use-package zenburn-theme
  :ensure t)
  #+end_src

* gap-mode

  #+begin_src emacs-lisp
(use-package gap-mode
  :ensure t
  :config
  (setq gap-executable "gap"
	gap-start-options  '("-E" "-f" "-b" "-m" "2m")))
  #+end_src

* helm

  #+begin_src emacs-lisp
(use-package helm
  :ensure t)
  #+end_src

* ido

  #+begin_src emacs-lisp
(use-package ido
  :config
  (ido-mode 1))
  #+end_src

* magit

  #+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-c m" . magit-status))
  #+end_src

* org

  #+begin_src emacs-lisp
(use-package org
  :bind (("C-c a" . org-agenda)
	 :map org-mode-map
	 ("$". yf/org-electric-dollar))
  :preface
  ;; from Nicolas Richard <theonewiththeevillook@yahoo.fr>
  ;; Date: Fri, 8 Mar 2013 16:23:02 +0100
  ;; Message-ID: <87vc913oh5.fsf@yahoo.fr>
  (defun yf/org-electric-dollar nil
    "When called once, insert \\(\\) and leave point in between.
When called twice, replace the previously inserted \\(\\) by one $."
    (interactive)
    (if (and (looking-at "\\\\)") (looking-back "\\\\("))
	(progn (delete-char 2)
	       (delete-char -2)
	       (insert "$"))
      (insert "\\(\\)")
      (backward-char 2)))
  (defun my-org-mode-hook ()
    (turn-on-auto-revert-mode)
    (turn-on-org-cdlatex))
  :config
  (use-package org-pomodoro
    :ensure t)
  (use-package org-ref
    :ensure t)
  (setq org-latex-listings t
	org-src-fontify-natively t)
  (add-hook 'org-mode-hook #'my-org-mode-hook)
  ;; when in :bind, these produce "Autoloading failed to define function"
  (define-key org-mode-map (kbd "s-j") #'org-babel-next-src-block)
  (define-key org-mode-map (kbd "s-k") #'org-babel-previous-src-block)
  (define-key org-mode-map (kbd "s-l") #'org-edit-src-code)
  (define-key org-src-mode-map (kbd "s-l") #'org-edit-src-exit))
  #+end_src

* smartparens

  https://github.com/Fuco1/smartparens

  #+BEGIN_QUOTE
  Smartparens is a minor mode for dealing with pairs in Emacs.
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :config
  (require 'smartparens-config)
  (smartparens-global-mode 1)
  (sp-pair "`" nil :actions nil)
  (sp-pair "'" nil :actions nil))
  #+end_src

* smex

  https://github.com/nonsequitur/smex/

  #+BEGIN_QUOTE
  Smex is a M-x enhancement for Emacs. Built on top of Ido, it
  provides a convenient interface to your recently and most frequently
  used commands. And to all the other commands, too.
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package smex
  :ensure t
  :bind ("M-x" . smex)
  :config (smex-initialize))
  #+end_src

* yasnippet

  https://github.com/joaotavora/yasnippet

  #+BEGIN_QUOTE
  YASnippet is a template system for Emacs. It allows you to type an
  abbreviation and automatically expand it into function
  templates. Bundled language templates include: C, C++, C#, Perl,
  Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is
  inspired from TextMate's syntax, you can even import most TextMate
  templates to YASnippet. Watch a demo on YouTube.
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config (yas-global-mode))
  #+end_src


* COMMENT Not for termux

** ob-ipython

** sage-shell-mode
